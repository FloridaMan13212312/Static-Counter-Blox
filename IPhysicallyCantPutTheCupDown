return function(config)
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local camera = game.Workspace.CurrentCamera

    local freecamEnabled = false
    local freecamCamera = Instance.new("Camera")
    freecamCamera.Name = "Freecam"
    freecamCamera.Parent = game.Workspace

    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    local moveVector = Vector3.zero
    local rotationVector = Vector2.zero

    local function disableCharacterMovement()
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    end

    local function enableCharacterMovement()
        humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
    end

    local function updateMovement()
        moveVector = Vector3.zero
        for key, vector in pairs(config.movementKeys) do
            if UserInputService:IsKeyDown(key) then
                moveVector += vector
            end
        end
    end

    local function updateRotation(input)
        rotationVector += Vector2.new(input.Delta.X * config.sensitivity, input.Delta.Y * config.sensitivity)
    end

    local function toggleFreecam()
        freecamEnabled = not freecamEnabled
        if freecamEnabled then
            freecamCamera.CFrame = camera.CFrame
            camera.CameraType = Enum.CameraType.Scriptable
            camera.CameraSubject = freecamCamera
            UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
            disableCharacterMovement()
        else
            camera.CameraType = Enum.CameraType.Custom
            camera.CameraSubject = humanoid
            UserInputService.MouseBehavior = Enum.MouseBehavior.Default
            enableCharacterMovement()
        end
    end

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed or not config.freecamAllowed then return end
        if input.KeyCode == config.freecamToggleKey then
            toggleFreecam()
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if freecamEnabled and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateRotation(input)
        end
    end)

    RunService.RenderStepped:Connect(function(deltaTime)
        if freecamEnabled then
            updateMovement()
            local yaw = CFrame.Angles(0, -math.rad(rotationVector.X), 0)
            local pitch = CFrame.Angles(-math.rad(rotationVector.Y), 0, 0)
            local newRotation = yaw * pitch
            local newPosition = freecamCamera.CFrame.Position
            newPosition += (newRotation.LookVector * moveVector.Z * config.moveSpeed * deltaTime)
            newPosition += (newRotation.RightVector * moveVector.X * config.moveSpeed * deltaTime)
            newPosition += (newRotation.UpVector * moveVector.Y * config.moveSpeed * deltaTime)
            freecamCamera.CFrame = CFrame.new(newPosition) * newRotation
            camera.CFrame = freecamCamera.CFrame
        end
    end)
end
